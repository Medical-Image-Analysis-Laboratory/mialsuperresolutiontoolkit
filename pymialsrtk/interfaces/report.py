# Copyright Â© 2016-2021 Medical Image Analysis Laboratory, University Hospital Center and University of Lausanne (UNIL-CHUV), Switzerland
#
#  This software is distributed under the open-source license Modified BSD.

"""PyMIALSRTK reporting interfaces."""

import os
import json
import pkg_resources

from jinja2 import Environment, FileSystemLoader

import nibabel as nib
from nipype.pipeline import Node
from nipype.interfaces.base import traits,\
    TraitedSpec, File, Directory, BaseInterface, BaseInterfaceInputSpec

from pymialsrtk.info import __version__


class MialsrtkSubjectReportInterfaceInputSpec(BaseInterfaceInputSpec):
    """Class used to represent inputs of the `MialsrtkSubjectReportInterface` interface."""

    subject = traits.Str(
            desc='Participant ID (for instance 01)',
            mandatory=True
    )
    sr_nii_image = File(
            desc='Path to super-resolution image in Nifti format',
            mandatory=True,
            exists=True
    )
    sr_json_metadata = File(
            desc='Path to super-resolution metadata in JSON format',
            mandatory=True,
            exists=True
    )
    sr_png_image = File(
            desc='Path to image in PNG format that shows orthogonal cuts of the super-resolution image',
            mandatory=True,
            exists=True
    )
    motion_report_image = File(
            desc='Path to image in PNG format generated by the StackOrdering interface for reporting',
            mandatory=True,
            exists=True
    )
    workflow_image = File(
            desc='Path to image generated by Nipype to represent the processing workflow',
            mandatory=True,
            exists=True
    )


class MialsrtkSubjectReportInterfaceOutputSpec(TraitedSpec):
    """Class used to represent outputs of the `MialsrtkSubjectReportInterface` interface."""

    report = File(
        desc='Super-resolution report of subject `participant_id` in HTML format'
)


class MialsrtkSubjectReportInterface(BaseInterface):
    """Create the super-resolution HTML report of a specific subject.

    Example
    ---------
    >>> from pymialsrtk.interfaces.report import MialsrtkSubjectReportInterface
    >>> subj_report = Node(
    >>>    interface=MialsrtkSubjectReportInterface(),
    >>>    name='subject_report'
    >>> )
    >>> subj_report.inputs.subject = '01'
    >>> subj_report.inputs.sr_nii_image = 'sub-01_rec-SR_id-1_T2w.nii.gz'
    >>> subj_report.inputs.sr_json_metadata = 'sub-01_rec-SR_id-1_T2w.json'
    >>> subj_report.inputs.sr_png_image = 'sub-01_rec-SR_id-1_T2w.png'
    >>> subj_report.inputs.motion_report_image = 'sub-01_rec-SR_id-1_desc-motion_stats.png'
    >>> subj_report.inputs.workflow_image = 'graph.png'
    >>> subj_report.run() # doctest: +SKIP

    """

    input_spec = MialsrtkSubjectReportInterfaceInputSpec
    output_spec = MialsrtkSubjectReportInterfaceOutputSpec

    def _run_interface(self, runtime):
        path = pkg_resources.resource_filename(
            'pymialsrtk',
            "data/report/templates/template.html"
        )
        jinja_template_dir = os.path.dirname(path)

        file_loader = FileSystemLoader(jinja_template_dir)
        env = Environment(loader=file_loader)

        template = env.get_template('template.html')

        img = nib.load(self.inputs.sr_nii_image)
        sx, sy, sz = img.header.get_zooms()

        # Opening JSON file
        with open(self.inputs.sr_json_metadata) as f:
            # Returns JSON object as a dictionary
            sr_json_metadata = json.load(f)

        report_html_content = template.render(
                subject=self.inputs.subject,
                in_plane_res=f"{sx}mm x {sy}mm",
                slice_thickness=f"{sz}mm",
                sr_json_metadata=sr_json_metadata,
                workflow_image=self.inputs.workflow_image,
                sr_png_image=self.inputs.sr_png_image,
                motion_report_image=self.inputs.motion_report_image,
                version=__version__
        )
        print(f'DEBUG: Report content={report_html_content}')

        print(f'DEBUG: Save as sub-{self.inputs.subject}.html...')
        with open(f"sub-{self.inputs.subject}.html", "w+") as file:
            file.write(report_html_content)

        return runtime

    def _list_outputs(self):
        outputs = self._outputs().get()
        outputs['report'] = f"sub-{self.inputs.subject}.html"
        return outputs